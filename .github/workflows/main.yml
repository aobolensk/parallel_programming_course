name: Build application

on:
  push:
  pull_request:
  merge_group:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: >-
    ${{ github.ref != 'refs/heads/master' &&
        github.event_name != 'merge_group' &&
        !startsWith(github.ref, 'refs/heads/gh-readonly-queue') }}

jobs:
  lint:
    uses: ./.github/workflows/lint.yml
  ubuntu:
    needs:
      - lint
    uses: ./.github/workflows/ubuntu.yml

  macos-clang-build:
    needs:
      - lint
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup environment
        run: |
          brew update-reset
          brew install ninja mpich llvm
          brew install libomp
          brew link libomp --overwrite --force
          brew install openssl
          brew link openssl --overwrite --force
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-clang
          create-symlink: true
          max-size: 1G
      - name: CMake configure
        run: >
          cmake -S . -B build
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -G Ninja -DCMAKE_C_FLAGS="-I$(brew --prefix)/opt/libomp/include"
          -DCMAKE_CXX_FLAGS="-I$(brew --prefix)/opt/libomp/include"
          -D CMAKE_BUILD_TYPE=RELEASE
          -DCMAKE_INSTALL_PREFIX=install
      - name: Build project
        run: |
          cmake --build build --parallel
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Archive installed package
        run: |
          tar -czvf macos-clang-sanitizer-install.tar.gz -C install .
      - name: Upload installed package
        uses: actions/upload-artifact@v4
        with:
          name: macos-clang-sanitizer-install
          path: macos-clang-sanitizer-install.tar.gz
  macos-clang-build-debug:
    needs:
      - lint
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup environment
        run: |
          brew update-reset
          brew install ninja mpich llvm
          brew install libomp
          brew link libomp --overwrite --force
          brew install openssl
          brew link openssl --overwrite --force
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-clang
          create-symlink: true
          max-size: 1G
      - name: CMake configure
        run: >
          cmake -S . -B build
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -G Ninja -DCMAKE_C_FLAGS="-I$(brew --prefix)/opt/libomp/include"
          -DCMAKE_CXX_FLAGS="-I$(brew --prefix)/opt/libomp/include"
          -D CMAKE_BUILD_TYPE=DEBUG
          -DCMAKE_INSTALL_PREFIX=install
      - name: Build project
        run: |
          cmake --build build --parallel
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Archive installed package
        run: |
          tar -czvf macos-clang-debug-install.tar.gz -C install .
      - name: Upload installed package
        uses: actions/upload-artifact@v4
        with:
          name: macos-clang-debug-install
          path: macos-clang-debug-install.tar.gz
  macos-clang-test:
    needs:
      - macos-clang-build
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          brew update-reset
          brew install ninja mpich llvm
          brew install libomp
          brew link libomp --overwrite --force
          brew install openssl
          brew link openssl --overwrite --force
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: macos-clang-sanitizer-install
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf macos-clang-sanitizer-install.tar.gz -C install
      - name: Run func tests (MPI, num_proc=1)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 1
          PPC_NUM_THREADS: 3
      - name: Run func tests (MPI, num_proc=2)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 2
          PPC_NUM_THREADS: 2
      - name: Run func tests (MPI, num_proc=3)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 3
          PPC_NUM_THREADS: 1
      - name: Run func tests (MPI, num_proc=4)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 4
          PPC_NUM_THREADS: 1
      - name: Run tests (threads, num_threads=1)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 1
      - name: Run tests (threads, num_threads=2)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 2
      - name: Run tests (threads, num_threads=3)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 3
      - name: Run tests (threads, num_threads=4)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 4
  macos-clang-test-extended:
    needs:
      - macos-clang-test
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          brew update-reset
          brew install ninja mpich llvm
          brew install libomp
          brew link libomp --overwrite --force
          brew install openssl
          brew link openssl --overwrite --force
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: macos-clang-sanitizer-install
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf macos-clang-sanitizer-install.tar.gz -C install
      - name: Run tests (threads, num_threads=5)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 5
      - name: Run tests (threads, num_threads=7)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 7
      - name: Run tests (threads, num_threads=11)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 11
      - name: Run tests (threads, num_threads=13)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 13
  windows-msvc-build:
    needs:
      - lint
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc
      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
      - name: Setup MSVC for Ninja again
        uses: ilammy/msvc-dev-cmd@v1
      - name: CMake configure
        shell: bash
        run: >
          cmake -S . -B build -G Ninja -D CMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=install
      - name: Build project
        shell: bash
        run: |
          cmake --build build --config Release --parallel
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Archive installed package
        run: Compress-Archive -Path install -DestinationPath windows-msvc-install.zip
        shell: pwsh
      - name: Upload installed package
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc-install
          path: windows-msvc-install.zip
  windows-msvc-build-debug:
    needs:
      - lint
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc
      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
      - name: Setup MSVC for Ninja again
        uses: ilammy/msvc-dev-cmd@v1
      - name: CMake configure
        shell: bash
        run: >
          cmake -S . -B build -G Ninja -D CMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=DEBUG -DCMAKE_INSTALL_PREFIX=install
      - name: Build project
        shell: bash
        run: |
          cmake --build build --config Debug --parallel
      - name: Install project
        run: |
          cmake --build build --target install
      - name: Archive installed package
        run: Compress-Archive -Path install -DestinationPath windows-msvc-debug-install.zip
        shell: pwsh
      - name: Upload installed package
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc-debug-install
          path: windows-msvc-debug-install.zip
  windows-msvc-test:
    needs:
      - windows-msvc-build
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: windows-msvc-install
      - name: Extract installed package
        run: Expand-Archive -Path .\windows-msvc-install.zip -DestinationPath . -Force
        shell: pwsh
      - name: Run func tests (MPI, num_proc=1)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 1
          PPC_NUM_THREADS: 3
      - name: Run func tests (MPI, num_proc=2)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 2
          PPC_NUM_THREADS: 2
      - name: Run func tests (MPI, num_proc=3)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 3
          PPC_NUM_THREADS: 1
      - name: Run func tests (MPI, num_proc=4)
        run: python3 scripts/run_tests.py --running-type="processes"
        env:
          PPC_NUM_PROC: 4
          PPC_NUM_THREADS: 1
      - name: Run tests (threads, num_threads=1)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 1
      - name: Run tests (threads, num_threads=2)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 2
      - name: Run tests (threads, num_threads=3)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 3
      - name: Run tests (threads, num_threads=4)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 4
  windows-msvc-test-extended:
    needs:
      - windows-msvc-test
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: windows-msvc-install
      - name: Extract installed package
        run: Expand-Archive -Path .\windows-msvc-install.zip -DestinationPath . -Force
        shell: pwsh
      - name: Run tests (threads, num_threads=5)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 5
      - name: Run tests (threads, num_threads=7)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 7
      - name: Run tests (threads, num_threads=11)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 11
      - name: Run tests (threads, num_threads=13)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 13
  windows-clang-build:
    needs:
      - lint
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          windows_compile_environment: msvc
      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
      - name: Setup MSVC for Ninja again
        uses: ilammy/msvc-dev-cmd@v1
      - name: CMake configure
        run: >
          cmake -S . -B build -G Ninja -D CMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl
          -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -D CMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=install
        env:
          CC: clang-cl
          CXX: clang-cl
      - name: Build project
        run: |
          cmake --build build --config Release --parallel
        env:
          CC: clang-cl
          CXX: clang-cl
      - name: Install project
        run: |
          cmake --install build
      - name: Archive installed package
        run: Compress-Archive -Path install -DestinationPath windows-clang-install.zip
        shell: pwsh
      - name: Upload installed package
        uses: actions/upload-artifact@v4
        with:
          name: windows-clang-install
          path: windows-clang-install.zip
  windows-clang-test:
    needs:
      - windows-clang-build
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: windows-clang-install
      - name: Extract installed package
        run: Expand-Archive -Path .\windows-clang-install.zip -DestinationPath . -Force
        shell: pwsh
      - name: Run tests (threads, num_threads=1)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 1
      - name: Run tests (threads, num_threads=2)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 2
      - name: Run tests (threads, num_threads=3)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 3
      - name: Run tests (threads, num_threads=4)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 4
  windows-clang-test-extended:
    needs:
      - windows-clang-test
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: windows-clang-install
      - name: Extract installed package
        run: Expand-Archive -Path .\windows-clang-install.zip -DestinationPath . -Force
        shell: pwsh
      - name: Run tests (threads, num_threads=5)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 5
      - name: Run tests (threads, num_threads=7)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 7
      - name: Run tests (threads, num_threads=11)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 11
      - name: Run tests (threads, num_threads=13)
        run: python3 scripts/run_tests.py --running-type="threads"
        env:
          PPC_NUM_THREADS: 13
  ubuntu-gcc-build-perf-stats:
    needs:
      - ubuntu
      - windows-clang-test-extended
      - windows-msvc-test-extended
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y gcc-14 g++-14 ninja-build libmpich-dev libomp-dev valgrind
          python3 -m pip install -r requirements.txt
      - name: Download installed package
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-gcc-install-ubuntu-24.04
      - name: Extract installed package
        run: |
          mkdir -p install
          tar -xzvf ubuntu-gcc-install-ubuntu-24.04.tar.gz -C install
      - name: Run perf count checker
        run: |
          python3 scripts/run_perf_counter.py --required-tests-number=2
        env:
          PPC_NUM_THREADS: 2
          PPC_NUM_PROC: 2
      - name: Run perf tests
        run: |
          bash -e scripts/generate_perf_results.sh
        env:
          PPC_NUM_THREADS: 2
          PPC_NUM_PROC: 2
      - name: Archive results
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r perf-stat.zip build/perf_stat_dir
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: perf-stat
          path: perf-stat.zip
